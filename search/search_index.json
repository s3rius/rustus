{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome page","text":"<p>Rustus is a production-ready TUS protocol implementation that helps you handle file uploads.</p> <p>This project has many features that make it easy to integrate with your existing infrastructure.</p>"},{"location":"#installation","title":"Installation","text":"<p>You can install rustus in four different ways.</p>"},{"location":"#from-source","title":"From source","text":"<p>To build it from source rust must be installed. We don't rely on nightly features, you can use last stable release.</p> <pre><code>git clone https://github.com/s3rius/rustus.git\ncd rustus\ncargo install --path .\n</code></pre>"},{"location":"#binaries","title":"Binaries","text":"<p>All precompiled binaries available on Github releases page. You can download binaries from here, unpack it and run.</p> <pre><code>./rustus\n</code></pre> <p>Make sure you download right version for your CPU architecture and OS.</p>"},{"location":"#using-docker","title":"Using Docker","text":"<p>One of the most simple ways to run rustus is <code>Docker</code>.</p> <p>Rustus has two containers for each version. 1. Debian based image 2. Alpine based image</p> <p>Alpine based images are more lightweight than Debian</p> <p>To run Rustus with Docker you just need to run this command</p> <pre><code>docker run --rm -p \"1081:1081\" -d ghcr.io/s3rius/rustus --log-level \"DEBUG\"\n</code></pre> <p>More information about Rustus docker images you can find on Docker hub page.</p>"},{"location":"configuration/","title":"Configuration","text":"<p>Rustus is highly configurable. You can adjust it with CLI or you can use environment variables.</p> <p>Info</p> <p>Information about hooks you can find on Hooks page.</p>"},{"location":"configuration/#configuring-server","title":"Configuring server","text":"<p>We use actix to run server. You can configure on which <code>host</code> and <code>port</code> rustus is listening. Also you can configure number of actix <code>workers</code> that handle connections.</p> <p><code>--max-body-size</code> is the max number of bytes that users can send in request body.</p> <p><code>--url</code> is a base URL for all tus requests.</p> <p><code>--workers</code> by default is equal to number of physical CPU cores. Edit it carefully.</p> <p><code>--cors</code> is a list of allowed hosts with wildcards separated by commas. By default all hosts are allowed. You can define which hosts are allowed for your particular application.</p> <p><code>--allow-empty</code> is a parameter that allows users to upload empty files. Empty file means that while creation 0 bytes was passed as an <code>Upload-Length</code>.</p> <p>For example if you add <code>--cors \"*.staging.domain,*.prod.domain\"</code>, it allows all origins like <code>my.staging.domain</code> or <code>my.prod.domain</code>, but it will refuse to serve other origins.</p> <p>Also you can disable access log for <code>/health</code> endpoint, by using <code>--disable-health-access-log</code>.</p> CLIENV <pre><code>rustus --host \"0.0.0.0\" \\\n    --port 1081 \\\n    --workers 8 \\\n    --max-body-size 1000000 \\\n    --url \"/files\" \\\n    --log-level \"INFO\" \\\n    --cors \"my.*.domain.com,your.*.domain.com\" \\\n    --disable-health-access-log \\\n    --allow-empty\n    --max-file-size 10000000\n</code></pre> <pre><code>export RUSTUS_SERVER_HOST=\"0.0.0.0\"\nexport RUSTUS_SERVER_PORT=\"1081\"\nexport RUSTUS_SERVER_WORKERS=\"8\"\nexport RUSTUS_MAX_BODY_SIZE=\"1000000\"\nexport RUSTUS_URL=\"/files\"\nexport RUSTUS_LOG_LEVEL=\"INFO\"\nexport RUSTUS_CORS=\"my.*.domain.com,your.*.domain.com\"\nexport RUSTUS_DISABLE_HEALTH_ACCESS_LOG=\"true\"\nexport RUSTUS_ALLOW_EMPTY=\"true\"\nexport RUSTUS_MAX_FILE_SIZE=\"10000000\"\n\nrustus\n</code></pre>"},{"location":"configuration/#sentry-integration","title":"Sentry integration","text":"<p>If you have sentry and want to see all erros in your sentry project, please provide sentry-dsn to rustus.</p> CLIENV <pre><code>rustus --sentry-dsn \"https://user@sentry-instance.com/11\" \\\n    --sentry-sample-rate 1.0\n</code></pre> <pre><code>export RUSTUS_SENTRY_DSN=\"https://user@sentry-instance.com/11\"\nexport RUSTUS_SENTRY_SAMPLE_RATE=\"1.0\"\n\nrustus\n</code></pre>"},{"location":"configuration/#configuring-storage","title":"Configuring storage","text":"<p>Storages are used to actually store your files. You can configure where you want to store files. By default in uses <code>file-storage</code> and stores every upload on your local file system.</p> <p>Availabe storages:</p> <ul> <li>file-storage</li> <li>hybrid-s3</li> <li>s3</li> </ul>"},{"location":"configuration/#file-storage","title":"File storage","text":"<p>File storage parameters:</p> <ul> <li><code>--data-dir</code> - path to the directory where all files are stored;</li> <li><code>--dir-structure</code> - pattern of a directory structure inside data dir;</li> <li><code>--force-fsync</code> - calls fsync system call after every write to disk. `` You can use variables within the pattern.</li> </ul> <p>Available variables:</p> <ul> <li><code>{year}</code> - current year;</li> <li><code>{month}</code> - current month number from 1 to 12;</li> <li><code>{day}</code> - current day number from 1 to 31;</li> <li><code>{hour}</code> - hour number from 0 to 23;</li> <li><code>{minute}</code> - minute number from 0 to 59;</li> </ul> <p>For example if you use <code>files/{year}/{month}/{day}</code> as your dir-structure, rustus stores files like:</p> <pre><code>$ tree data\ndata\n\u2514\u2500\u2500 files\n    \u2514\u2500\u2500 2022\n        \u2514\u2500\u2500 1\n            \u2514\u2500\u2500 8\n                \u251c\u2500\u2500 0bd911d4054d41c6a3ad54be67ee3e66\n                \u2514\u2500\u2500 5bc9c62384494c439e2a064b82a39cc6\n</code></pre> CLIENV <pre><code>rustus --force-fsync \\\n    --storage \"file-storage\" \\\n    --data-dir \"./data/\" \\\n    --dir-structure \"{year}/{month}/{day}\"\n</code></pre> <pre><code>export RUSTUS_STORAGE=\"file-storage\"\nexport RUSTUS_DATA_DIR=\"./data/\"\nexport RUSTUS_DIR_STRUCTURE=\"{year}/{month}/{day}\"\nexport RUSTUS_FORCE_FSYNC=\"true\"\n\nrustus\n</code></pre>"},{"location":"configuration/#hybrid-s3-storage","title":"Hybrid-S3 storage","text":"<p>This storage stores files locally and uploads resulting file on S3 when the upload is finished. It has no restriction on chunk size and you can make chunks less than 5MB.</p> <p>Danger</p> <p>When choosing this storage you still need to have a connected shared directory between instances.</p> <p>This storage is not intended to be used for large files, since it uploads files to S3 during the last request.</p> <p>Hybrid-S3 uses file-storage inside, so all parameters from file storage also applied to it.</p> <p>Parameters:</p> <ul> <li><code>--dir-structure</code> - pattern of a directory structure locally and on s3;</li> <li><code>--data-dir</code> - path to the local directory where all files are stored;</li> <li><code>--force-fsync</code> - calls fsync system call after every write to disk in local storage;</li> <li><code>--s3-url</code> -  s3 endpoint URL;</li> <li><code>--s3-bucket</code> - name of a bucket to use;</li> <li><code>--s3-region</code> - AWS region to use;</li> <li><code>--s3-access-key</code> - S3 access key;</li> <li><code>--s3-access-key-path</code> - S3 access key path;</li> <li><code>--s3-secret-key</code> - S3 secret key;</li> <li><code>--s3-secret-key-path</code> - S3 secret key path;</li> <li><code>--s3-security-token</code> - s3 secrity token;</li> <li><code>--s3-session-token</code> - S3 session token;</li> <li><code>--s3-profile</code> - Name of the section from <code>~/.aws/credentials</code> file;</li> <li><code>--s3-headers</code> - JSON object with additional header to every S3 request (Useful for setting ACLs);</li> <li><code>--s3-force-path-style</code> - use path style URL. It appends bucket name at the end of the URL;</li> </ul> <p>Required parameter are only <code>--s3-url</code> and <code>--s3-bucket</code>.</p> CLIENV <pre><code>rustus --storage \"hybrid-s3\" \\\n    --s3-url \"https://localhost:9000\" \\\n    --s3-bucket \"bucket\" \\\n    --s3-region \"eu-central1\" \\\n    --s3-access-key \"fJljHcXo07rqIOzh\" \\\n    --s3-access-key-path \"/run/agenix/S3_ACCESS_KEY\" \\\n    --s3-secret-key \"6BJfBUL18nLiGmF5zKW0NKrdxQVxNYWB\" \\\n    --s3-secret-key-path \"/run/agenix/S3_SECRET_KEY\" \\\n    --s3-profile \"my_profile\" \\\n    --s3-security-token \"token\" \\\n    --s3-session-token \"token\" \\\n    --s3-force-path-style \\\n    --s3-headers '{\"x-amz-acl\": \"public-read\"}' \\\n    --force-fsync \\\n    --data-dir \"./data/\" \\\n    --dir-structure \"{year}/{month}/{day}\"\n</code></pre> <pre><code>export RUSTUS_STORAGE=\"hybrid-s3\"\nexport RUSTUS_S3_URL=\"https://localhost:9000\"\nexport RUSTUS_S3_BUCKET=\"bucket\"\nexport RUSTUS_S3_REGION=\"eu-central1\"\nexport RUSTUS_S3_ACCESS_KEY=\"fJljHcXo07rqIOzh\"\nexport RUSTUS_S3_ACCESS_KEY_PATH=\"/run/agenix/S3_ACCESS_KEY\"\nexport RUSTUS_S3_SECRET_KEY=\"6BJfBUL18nLiGmF5zKW0NKrdxQVxNYWB\"\nexport RUSTUS_S3_SECRET_KEY_PATH=\"/run/agenix/S3_SECCRET_KEY\"\nexport RUSTUS_S3_SECURITY_TOKEN=\"token\"\nexport RUSTUS_S3_SESSION_TOKEN=\"token\"\nexport RUSTUS_S3_PROFILE=\"my_profile\"\nexport RUSTUS_S3_HEADERS='{\"x-amz-acl\": \"public-read\"}'\nexport RUSTUS_DATA_DIR=\"./data/\"\nexport RUSTUS_DIR_STRUCTURE=\"{year}/{month}/{day}\"\nexport RUSTUS_FORCE_FSYNC=\"true\"\nexport RUSTUS_S3_FORCE_PATH_STYLE=\"true\"\n\nrustus\n</code></pre>"},{"location":"configuration/#s3-storage","title":"S3 Storage","text":"<p>This storage uploads files directly to S3 without creating temporary files on filesystem. This might be a better solution for you if you use S3 as underlying object storage, but it has a disadvantage.</p> <p>Be aware</p> <p>This storage can only upload chunks that are greater than <code>5MB</code> each, except for the last one. Therefore, for all your TUS client libraries, you should set the chunk size to at least <code>5,000,000</code> bytes</p> <p>If you want to allow users to upload smaller chunks, consider using hybrid-s3.</p> <p>Parameters:</p> <ul> <li><code>--s3-url</code> -  s3 endpoint URL;</li> <li><code>--s3-bucket</code> - name of a bucket to use;</li> <li><code>--s3-region</code> - AWS region to use;</li> <li><code>--s3-access-key</code> - S3 access key;</li> <li><code>--s3-access-key-path</code> - S3 access key path;</li> <li><code>--s3-secret-key</code> - S3 secret key;</li> <li><code>--s3-secret-key-path</code> - S3 secret key path;</li> <li><code>--s3-security-token</code> - s3 secrity token;</li> <li><code>--s3-session-token</code> - S3 session token;</li> <li><code>--s3-profile</code> - Name of the section from <code>~/.aws/credentials</code> file;</li> <li><code>--s3-headers</code> - JSON object with additional header to every S3 request (Useful for setting ACLs);</li> <li><code>--s3-force-path-style</code> - use path style URL. It appends bucket name at the end of the URL;</li> <li><code>--dir-structure</code> - pattern of a directory structure on s3;</li> </ul> <p>Required parameter are only <code>--s3-url</code> and <code>--s3-bucket</code>.</p> CLIENV <pre><code>rustus --storage \"s3\" \\\n    --s3-url \"https://localhost:9000\" \\\n    --s3-bucket \"bucket\" \\\n    --s3-region \"eu-central1\" \\\n    --s3-access-key \"fJljHcXo07rqIOzh\" \\\n    --s3-access-key-path \"/run/agenix/S3_ACCESS_KEY\" \\\n    --s3-secret-key \"6BJfBUL18nLiGmF5zKW0NKrdxQVxNYWB\" \\\n    --s3-secret-key-path \"/run/agenix/S3_SECRET_KEY\" \\\n    --s3-profile \"my_profile\" \\\n    --s3-security-token \"token\" \\\n    --s3-session-token \"token\" \\\n    --s3-force-path-style \\\n    --s3-headers '{\"x-amz-acl\": \"public-read\"}' \\\n    --dir-structure \"{year}/{month}/{day}\"\n</code></pre> <pre><code>export RUSTUS_STORAGE=\"s3\"\nexport RUSTUS_S3_URL=\"https://localhost:9000\"\nexport RUSTUS_S3_BUCKET=\"bucket\"\nexport RUSTUS_S3_REGION=\"eu-central1\"\nexport RUSTUS_S3_ACCESS_KEY=\"fJljHcXo07rqIOzh\"\nexport RUSTUS_S3_ACCESS_KEY_PATH=\"/run/agenix/S3_ACCESS_KEY\"\nexport RUSTUS_S3_SECRET_KEY=\"6BJfBUL18nLiGmF5zKW0NKrdxQVxNYWB\"\nexport RUSTUS_S3_SECRET_KEY_PATH=\"/run/agenix/S3_SECCRET_KEY\"\nexport RUSTUS_S3_SECURITY_TOKEN=\"token\"\nexport RUSTUS_S3_SESSION_TOKEN=\"token\"\nexport RUSTUS_S3_PROFILE=\"my_profile\"\nexport RUSTUS_S3_HEADERS='{\"x-amz-acl\": \"public-read\"}'\nexport RUSTUS_S3_FORCE_PATH_STYLE=\"true\"\nexport RUSTUS_DIR_STRUCTURE=\"{year}/{month}/{day}\"\n\nrustus\n</code></pre>"},{"location":"configuration/#configuring-info-storage","title":"Configuring info storage","text":"<p>Info storages are used to store information about file uploads. These storages must be persistent, because every time chunk is uploaded rustus updates information about upload. And when someone wants to download file, information about it requested from storage to get actual path of an upload.</p> <p>Available info storages:</p> <ul> <li>file-info-storage - stores information in files on disk;</li> <li>redis-info-storage - information is stored in Redis;</li> </ul>"},{"location":"configuration/#file-info-storage","title":"File info storage","text":"<p>file info storage stores information in files on disk. It's default info storage. Every download has it's own associated file. All .info files stored in flat structure so it's the least preferable way of storing information about uploads. But if you don't plan to have many uploads, it may fit well.</p> <p><code>--info-dir</code> - directory where all .info file will be stored (default is <code>./data</code>).</p> CLIENV <pre><code>rustus --info-storage \"file-info-storage\" \\\n    --info-dir \"./data\"\n</code></pre> <pre><code>export RUSTUS_INFO_STORAGE=\"file-info-storage\"\nexport RUSTUS_INFO_DIR=\"./data\"\n\nrustus\n</code></pre>"},{"location":"configuration/#redis-info-storage","title":"Redis info storage","text":"<p>Redis db is a good way to store information.</p> <p>Note</p> <p>If you're using Redis as a cluster you must provide connection string for master Redis server. Since rustus need to have latest information and it writes a lot.</p> <p>Configuration parameters:</p> <ul> <li><code>--info-db-dsn</code> - connection string for your Redis database.     It's required if <code>redis-info-storage</code> is chosen.</li> <li><code>--redis-info-expiration</code> - number of seconds when key will expire.</li> </ul> CLIENV <pre><code>rustus --info-storage \"redis-info-storage\" \\\n    --info-db-dsn \"redis://localhost/0\" \\\n    --redis-info-expiration 100\n</code></pre> <pre><code>export RUSTUS_INFO_STORAGE=\"redis-info-storage\"\nexport RUSTUS_INFO_DB_DSN=\"redis://localhost\"\nexport RUSTUS_REDIS_INFO_EXPIRATION=\"100\"\n\nrustus\n</code></pre>"},{"location":"configuration/#configuring-tus","title":"Configuring TUS","text":"<p>Since TUS protocol offers extensibility you can turn off some protocol extensions.</p> <p>Available extensions:</p> <ul> <li><code>getting</code> - Rustus specific extension that helps you download uploaded files with get request;</li> <li><code>creation</code> - helps you to create files (It's like a core feature you better have this enabled);</li> <li><code>termination</code> - allows you to delete uploads with DELETE request;</li> <li><code>creation-with-upload</code> - allows you to write first bytes of a file while creating;</li> <li><code>creation-defer-length</code> - allows you to create file without specifying file length;</li> <li><code>concatenation</code> - allows you to concatenate finished partial uploads.</li> <li><code>checksum</code> - allows you to verify checksum of every batch.</li> </ul> <p>You can read more about extensions on official web-site.</p> <p><code>--tus-extensions</code> - a list of enabled extensions. <code>--remove-parts</code> - remove parts files after successful concatenation (disabled by default).</p> <p>By default all extensions are enabled.</p> CLIENV <pre><code>rustus --remove-parts \\\n    --tus-extensions \"getting,creation,termination,creation-with-upload,creation-defer-length,concatenation,checksum\"\n</code></pre> <pre><code>export RUSTUS_TUS_EXTENSIONS=\"getting,creation,termination,creation-with-upload,creation-defer-length,concatenation,checksum\"\nexport RUSTUS_REMOVE_PARTS=\"true\"\n\nrustus\n</code></pre>"},{"location":"deploy/","title":"Deployment","text":"<p>Deploying an application is always a challenge. Rustus was made to make deployment as easy as possible. Since Rustus works with files you have to be careful while scaling it. All rustus instances must have access to the same data and info storages.</p> <p>Info</p> <p>If you want to track you rustus instances with prometheus you can always get metrics at <code>/metrics</code> endpoint.</p>"},{"location":"deploy/#docker-compose","title":"Docker compose","text":"docker-compose.yml<pre><code># This is super simple configuration\nversion: \"3.7\"\n\nservices:\n  rustus:\n    image: ghcr.io/s3rius/rustus\n    volumes:\n    # Volume mounted to default data directory\n    # So it's available across multiple containers.\n      - rustus_data_volume:/app/data\n\nvolumes:\n  rustus_data_volume:\n</code></pre> <p>After running <code>docker compose up</code> you will see rustus startup logs.</p> <p>If you want to deploy multiple rustus instances you can simply use config as this one:</p> docker-compose.yml<pre><code>version: \"3.7\"\n\nservices:\n  proxy:\n    image: jwilder/nginx-proxy:alpine\n    container_name: proxy\n    # Actual proxy ports.\n    ports:\n      - 8080:80\n    volumes:\n    # This thing helps to locate containers\n    # within this composition to generate nginx config.\n      - /var/run/docker.sock:/tmp/docker.sock:ro\n\n  rustus:\n    image: ghcr.io/s3rius/rustus\n    ports:\n    # Ports definition\n    # To generate correct nginx config.\n      - 1081\n    volumes:\n    # Volume mounted to default data directory\n    # So it's available across multiple containers.\n      - rustus_data_volume:/app/data\n    environment:\n        # Idk why but without this variable\n        # load balancing with jwilder/nginx-proxy doesn't work.\n        VIRTUAL_HOST: localhost\n\nvolumes:\n  rustus_data_volume: # This is named volume\n</code></pre> <p>The main idea is that traffic that comes into nginx-proxy is routed in one of multiple rustus containers. Here I used <code>jwilder/nginx-proxy</code> but you can use other reverse-proxies such as Nginx proxy, Traefik or Envoy proxy.</p> <p>Now you can run multiple rustus instances like this.</p> <pre><code>docker compose up --scale rustus=3\n</code></pre> <p>After that you can upload files to <code>http://localhost:8080/files</code></p>"},{"location":"deploy/#kubernetes","title":"Kubernetes","text":"<p>Configuration for Kubernetes is almost the same as for Docker. But the most preferable way is an official helm chart.</p> <p>Load balancing is done by Kubernetes, so you just have to create a volume to mount data and info directories.</p>"},{"location":"deploy/#helm","title":"Helm","text":"<p>You can install rustus by running this set of commands: <pre><code>helm install \"rustus\" \"oci://ghcr.io/s3rius/charts/rustus\"\n</code></pre></p>"},{"location":"deploy/#configuration","title":"Configuration","text":"<p>Since default deployment may not fit you. You can adjust it to satisfy your needs. You can do it easily with helm.</p> <p>At first you need to save default values on disk.</p> <pre><code># You can download basic configuration by running\nhelm show values \"oci://ghcr.io/s3rius/charts/rustus\" &gt; values.yml\n</code></pre> <p>Warning</p> <p>For production use you must provide and mount PersistentVolumeClaim in order to scale rustus.</p> <p>This helm chart has only one replica by default.</p> <p>You can read more about configuration below.</p> <p>After you done editing <code>values.yml</code>, you can apply the configuration like this:</p> <pre><code>helm upgrade \\\n--install \\ # Install chart if it's not installed\n--namespace rustus \\ # k8s namespace\n--create-namespace \\ # Creates namespace if it doesn't exist\n--atomic \\ # Ensures that everything is deployed correctly\n--values \"values.yml\" \\ # Link to values.yml file\n\"rustus\" \\ # name of a release\n\"oci://ghcr.io/s3rius/charts/rustus\" # Url to the chart\n</code></pre>"},{"location":"deploy/#persistence","title":"Persistence","text":"<p>You can add PVC mount by editing <code>persistence</code> section. The most preferable way is to create <code>PersistentVolume</code> and <code>PersistentVolumeClaim</code> before installing this chart.</p> <p>After you created claim you can apply this values file to mount your claim into rustus. values.yml<pre><code>persistence:\n  enabled: true\n  existingClaim: \"rustus-pvc\"\n</code></pre></p> <p>Warning</p> <p>Currently there's no ability to create multiple mounts and if you use file info storage you must specify the same directory as you specified for data storage.</p> <p>But it would be better to use other type of info-storage.</p>"},{"location":"deploy/#subcharts","title":"Subcharts","text":"<p>For example if you want to use redis as your info storage.</p> values.yml<pre><code>env:\n  RUSTUS_INFO_STORAGE: redis-info-storage\n  RUSTUS_INFO_DB_DSN: redis://:pass@rustus-redis-master/0\n\nredis:\n  enabled: true\n</code></pre> <p><code>redis</code>, <code>postgresql</code> and <code>mysql</code> are subcharts.</p> <p>You can find information about configuration these subcharts here:</p> <ul> <li>Repo for redis;</li> <li>Repo for mysql;</li> <li>Repo for postgresql.</li> </ul> <p>In production you may ignore these subcharts to deploy your own redis or mysql or postgresql.</p>"},{"location":"hooks/","title":"Setting up hooks","text":"<p>Rustus can notify about uploads using hooks. This is useful when you integrate rustus in your architecture. Apps can keep track of every upload using this feature.</p> <p>Rustus has different event types for different moments of an upload's lifecycle.</p> <ul> <li><code>pre-create</code> - This hook means that someone wants to create an upload;</li> <li><code>post-create</code> - someone successfully created an upload;</li> <li><code>post-receive</code> - someone uploaded a new part of an upload;</li> <li><code>pre-terminate</code> - someone wants to delete the upload;</li> <li><code>post-terminate</code> - someone deleted upload;</li> <li><code>post-finish</code> - someone finished uploading file.</li> </ul> <p>Note</p> <p><code>Pre-create</code> and <code>Pre-terminate</code> hooks are very important. If at least one of hooks fails, upload creation or removal is canceled.</p> <p>But AMQP hooks won't cancel the upload, since it's non blocking type of hooks.</p> <p>Warning</p> <p>After creating final upload with concatenation extension, you won't receive <code>post-create</code> hook, but <code>post-finish</code> instead.</p> <p>Warning</p> <p>If you uploaded a whole file within one request with <code>creation-with-upload</code> extension, you won't receive <code>post-create</code> hook, but <code>post-finish</code> instead.</p> <p>You can disable some hooks by using <code>--hooks</code> parameter.</p> CLIENV <pre><code>rustus --hooks \"pre-create,post-create,post-receive,pre-terminate,post-terminate,post-finish\"\n</code></pre> <pre><code>export RUSTUS_HOOKS=\"pre-create,post-create,post-receive,pre-terminate,post-terminate,post-finish\"\n\nrustus\n</code></pre>"},{"location":"hooks/#proxies","title":"Proxies","text":"<p>If you have rustus behind proxy like nginx, please use <code>--behind-proxy</code> parameter. This parameter helps rustus resolve ip addresses using <code>Forwarded</code> and <code>X-Forwarded-For</code>.</p> <p>This option disabled by default for security purposes unless you can be sure that the <code>Forwarded</code> and <code>X-Forwarded-For</code> headers cannot be spoofed by the client.</p> CLIENV <pre><code>rustus --behind-proxy\n</code></pre> <pre><code>export RUSTUS_BEHIND_PROXY=\"true\"\n\nrustus\n</code></pre>"},{"location":"hooks/#format","title":"Format","text":"<p>Information about every event is sent using <code>JSON</code> format. Format can be configured with <code>--hooks-format</code> parameter or <code>RUSTUS_HOOKS_FORMAT</code> environment variable.</p> <p>Available formats:</p> <ul> <li>default (will be replaced by v2 in the future)</li> <li>v2 (preferred format)</li> <li>tusd</li> </ul> defaultv2tusd ExamplePydantic modelsJSON schema <pre><code>{\n    \"upload\": {\n        \"id\": \"3cd911fe-eba0-499a-b220-b1d1b947b80f\",\n        \"offset\": 0,\n        \"length\": 220,\n        \"path\": null,\n        \"created_at\": 1658671969,\n        \"deferred_size\": false,\n        \"is_partial\": false,\n        \"is_final\": false,\n        \"parts\": null,\n        \"storage\": \"file_storage\",\n        \"metadata\": {\n            \"filename\" \"shrek2.mkv\"\n        }\n    },\n    \"request\": {\n        \"URI\": \"/files/\",\n        \"method\": \"POST\",\n        \"remote_addr\": \"127.0.0.1\",\n        \"headers\": {\n            \"host\": \"rustus.localhost\",\n            \"upload-length\": \"220\",\n            \"user-agent\": \"curl/7.84.0\",\n            \"accept\": \"*/*\",\n            \"upload-metadata\": \"filename MTZNQl92aWRlby5tcDQ=\"\n        }\n    }\n}\n</code></pre> <pre><code>from datetime import datetime\nfrom typing import Dict, Optional\n\nfrom pydantic import BaseModel, IPvAnyAddress\n\n\nclass Upload(BaseModel):\n    \"\"\"Information about the upload.\"\"\"\n\n    id: str\n    offset: int\n    length: int\n    path: Optional[str]\n    # Actually it's an int,\n    # but pydantic can parse it as datetime.\n    created_at: datetime\n    deferred_size: bool\n    is_partial: bool\n    is_final: bool\n    parts: Optional[List[str]]\n    storage: str\n    metadata: Dict[str, str]\n\n\nclass Request(BaseModel):\n    \"\"\"\n    Information about request.\n\n    This request was direct cause of hook invocation.\n    \"\"\"\n\n    URI: str\n    method: str\n    remote_addr: Optional[IPvAnyAddress]\n    headers: Dict[str, str]\n\n\nclass Hook(BaseModel):\n    \"\"\"Rustus hook.\"\"\"\n\n    upload: Upload\n    request: Request\n</code></pre> <pre><code>{\n    \"title\": \"Hook\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"upload\": {\n            \"$ref\": \"#/definitions/Upload\"\n        },\n        \"request\": {\n            \"$ref\": \"#/definitions/Request\"\n        }\n    },\n    \"required\": [\n        \"upload\",\n        \"request\"\n    ],\n    \"definitions\": {\n        \"Upload\": {\n            \"title\": \"Upload\",\n            \"type\": \"object\",\n            \"properties\": {\n                \"id\": {\n                    \"title\": \"Id\",\n                    \"type\": \"string\"\n                },\n                \"offset\": {\n                    \"title\": \"Offset\",\n                    \"type\": \"integer\"\n                },\n                \"length\": {\n                    \"title\": \"Length\",\n                    \"type\": \"integer\"\n                },\n                \"path\": {\n                    \"title\": \"Path\",\n                    \"type\": \"string\"\n                },\n                \"created_at\": {\n                    \"title\": \"Created At\",\n                    \"type\": \"integer\"\n                },\n                \"deferred_size\": {\n                    \"title\": \"Deferred Size\",\n                    \"type\": \"boolean\"\n                },\n                \"is_partial\": {\n                    \"title\": \"Is Partial\",\n                    \"type\": \"boolean\"\n                },\n                \"is_final\": {\n                    \"title\": \"Is Final\",\n                    \"type\": \"boolean\"\n                },\n                \"parts\": {\n                    \"title\": \"Parts\",\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"storage\": {\n                    \"title\": \"Storage\",\n                    \"type\": \"string\"\n                },\n                \"metadata\": {\n                    \"title\": \"Metadata\",\n                    \"type\": \"object\",\n                    \"additionalProperties\": {\n                        \"type\": \"string\"\n                    }\n                }\n            },\n            \"required\": [\n                \"id\",\n                \"offset\",\n                \"length\",\n                \"created_at\",\n                \"deferred_size\",\n                \"is_partial\",\n                \"is_final\",\n                \"storage\",\n                \"metadata\"\n            ]\n        },\n        \"Request\": {\n            \"title\": \"Request\",\n            \"type\": \"object\",\n            \"properties\": {\n                \"URI\": {\n                    \"title\": \"Uri\",\n                    \"type\": \"string\"\n                },\n                \"method\": {\n                    \"title\": \"Method\",\n                    \"type\": \"string\"\n                },\n                \"remote_addr\": {\n                    \"title\": \"Remote Addr\",\n                    \"type\": \"string\",\n                    \"format\": \"ipvanyaddress\"\n                },\n                \"headers\": {\n                    \"title\": \"Headers\",\n                    \"type\": \"object\",\n                    \"additionalProperties\": {\n                        \"type\": \"string\"\n                    }\n                }\n            },\n            \"required\": [\n                \"URI\",\n                \"method\",\n                \"headers\"\n            ]\n        }\n    }\n}\n</code></pre> ExamplePydantic modelsJSON schema <pre><code>{\n    \"upload\": {\n        \"id\": \"3cd911fe-eba0-499a-b220-b1d1b947b80f\",\n        \"offset\": 0,\n        \"length\": 220,\n        \"path\": null,\n        \"created_at\": 1658671969,\n        \"deferred_size\": false,\n       \"is_partial\": false,\n        \"is_final\": false,\n        \"parts\": null,\n        \"storage\": \"file_storage\",\n        \"metadata\": {\n            \"filename\" \"shrek2.mkv\"\n        }\n    },\n    \"request\": {\n        \"uri\": \"/files/\",\n        \"method\": \"POST\",\n        \"remote_addr\": \"127.0.0.1\",\n        \"headers\": {\n            \"host\": \"rustus.localhost\",\n            \"upload-length\": \"220\",\n            \"user-agent\": \"curl/7.84.0\",\n            \"accept\": \"*/*\",\n            \"upload-metadata\": \"filename MTZNQl92aWRlby5tcDQ=\"\n        }\n    }\n}\n</code></pre> <pre><code>from datetime import datetime\nfrom typing import Dict, Optional\n\nfrom pydantic import BaseModel, IPvAnyAddress\n\n\nclass Upload(BaseModel):\n    \"\"\"Information about the upload.\"\"\"\n\n    id: str\n    offset: int\n    length: int\n    path: Optional[str]\n    # Actually it's an int,\n    # but pydantic can parse it as datetime.\n    created_at: datetime\n    deferred_size: bool\n    is_partial: bool\n    is_final: bool\n    parts: Optional[List[str]]\n    storage: str\n    metadata: Dict[str, str]\n\n\nclass Request(BaseModel):\n    \"\"\"\n    Information about request.\n\n    This request was direct cause of hook invocation.\n    \"\"\"\n\n    uri: str\n    method: str\n    remote_addr: Optional[IPvAnyAddress]\n    headers: Dict[str, str]\n\n\nclass Hook(BaseModel):\n    \"\"\"Rustus hook.\"\"\"\n\n    upload: Upload\n    request: Request\n</code></pre> <pre><code>{\n    \"title\": \"Hook\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"upload\": {\n            \"$ref\": \"#/definitions/Upload\"\n        },\n        \"request\": {\n            \"$ref\": \"#/definitions/Request\"\n        }\n    },\n    \"required\": [\n        \"upload\",\n        \"request\"\n    ],\n    \"definitions\": {\n        \"Upload\": {\n            \"title\": \"Upload\",\n            \"type\": \"object\",\n            \"properties\": {\n                \"id\": {\n                    \"title\": \"Id\",\n                    \"type\": \"string\"\n                },\n                \"offset\": {\n                    \"title\": \"Offset\",\n                    \"type\": \"integer\"\n                },\n                \"length\": {\n                    \"title\": \"Length\",\n                    \"type\": \"integer\"\n                },\n                \"path\": {\n                    \"title\": \"Path\",\n                    \"type\": \"string\"\n                },\n                \"created_at\": {\n                    \"title\": \"Created At\",\n                    \"type\": \"integer\"\n                },\n                \"deferred_size\": {\n                    \"title\": \"Deferred Size\",\n                    \"type\": \"boolean\"\n                },\n                \"is_partial\": {\n                    \"title\": \"Is Partial\",\n                    \"type\": \"boolean\"\n                },\n                \"is_final\": {\n                    \"title\": \"Is Final\",\n                    \"type\": \"boolean\"\n                },\n                \"parts\": {\n                    \"title\": \"Parts\",\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"storage\": {\n                    \"title\": \"Storage\",\n                    \"type\": \"string\"\n                },\n                \"metadata\": {\n                    \"title\": \"Metadata\",\n                    \"type\": \"object\",\n                    \"additionalProperties\": {\n                        \"type\": \"string\"\n                    }\n                }\n            },\n            \"required\": [\n                \"id\",\n                \"offset\",\n                \"length\",\n                \"created_at\",\n                \"deferred_size\",\n                \"is_partial\",\n                \"is_final\",\n                \"storage\",\n                \"metadata\"\n            ]\n        },\n        \"Request\": {\n            \"title\": \"Request\",\n            \"type\": \"object\",\n            \"properties\": {\n                \"uri\": {\n                    \"title\": \"Uri\",\n                    \"type\": \"string\"\n                },\n                \"method\": {\n                    \"title\": \"Method\",\n                    \"type\": \"string\"\n                },\n                \"remote_addr\": {\n                    \"title\": \"Remote Addr\",\n                    \"type\": \"string\",\n                    \"format\": \"ipvanyaddress\"\n                },\n                \"headers\": {\n                    \"title\": \"Headers\",\n                    \"type\": \"object\",\n                    \"additionalProperties\": {\n                        \"type\": \"string\"\n                    }\n                }\n            },\n            \"required\": [\n                \"uri\",\n                \"method\",\n                \"headers\"\n            ]\n        }\n    }\n}\n</code></pre> ExamplePydantic modelsJSON schema <pre><code>{\n    \"Upload\": {\n        \"ID\": \"317e1429-61f3-4631-a480-c50207b69ee4\",\n        \"Offset\": 0,\n        \"Size\": 16392985,\n        \"IsFinal\": false,\n        \"IsPartial\": false,\n        \"PartialUploads\": null,\n        \"SizeIsDeferred\": false,\n        \"MetaData\": {\n            \"filename\": \"shrek2.mkv\"\n        },\n        \"Storage\": {\n            \"Type\": \"file_storage\",\n            \"Path\": null\n        }\n    },\n    \"HTTPRequest\": {\n        \"URI\": \"/files/\",\n        \"Method\": \"POST\",\n        \"RemoteAddr\": \"127.0.0.1\",\n        \"Header\": {\n            \"content-length\": [\n                \"0\"\n            ],\n            \"upload-length\": [\n                \"16392985\"\n            ],\n            \"user-agent\": [\n                \"python-requests/2.27.1\"\n            ],\n            \"host\": [\n                \"rustus.localhost\"\n            ],\n            \"accept\": [\n                \"*/*\"\n            ],\n            \"upload-metadata\": [\n                \"filename MTZNQl92aWRlby5tcDQ=\"\n            ],\n            \"tus-resumable\": [\n                \"1.0.0\"\n            ]\n        }\n    }\n}\n</code></pre> <pre><code>from typing import Dict, List, Optional\n\nfrom pydantic import BaseModel, IPvAnyAddress\n\n\nclass Request(BaseModel):\n    \"\"\"\n    Information about request.\n\n    This request was direct cause of hook invocation.\n    \"\"\"\n\n    URI: str\n    Method: str\n    RemoteAddr: IPvAnyAddress\n    Header: Dict[str, List[str]]\n\n\nclass Storage(BaseModel):\n    \"\"\"Information where upload is stored.\"\"\"\n\n    Type: str\n    Path: Optional[str]\n\n\nclass Upload(BaseModel):\n    \"\"\"Information about the upload.\"\"\"\n\n    ID: str\n    Offset: int\n    Size: int\n    IsFinal: bool\n    IsPartial: bool\n    PartialUploads: Optional[List[str]]\n    SizeIsDeferred: bool\n    MetaData: Dict[str, str]\n    Storage: Storage\n\n\nclass Hook(BaseModel):\n    \"\"\"Rustus hook.\"\"\"\n\n    Upload: Upload\n    HTTPRequest: Request\n</code></pre> <pre><code>{\n    \"title\": \"Hook\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"Upload\": {\n            \"$ref\": \"#/definitions/Upload\"\n        },\n        \"HTTPRequest\": {\n            \"$ref\": \"#/definitions/Request\"\n        }\n    },\n    \"required\": [\n        \"Upload\",\n        \"HTTPRequest\"\n    ],\n    \"definitions\": {\n        \"Storage\": {\n            \"title\": \"Storage\",\n            \"type\": \"object\",\n            \"properties\": {\n                \"Type\": {\n                    \"title\": \"Type\",\n                    \"type\": \"string\"\n                },\n                \"Path\": {\n                    \"title\": \"Path\",\n                    \"type\": \"string\"\n                }\n            },\n            \"required\": [\n                \"Type\"\n            ]\n        },\n        \"Upload\": {\n            \"title\": \"Upload\",\n            \"type\": \"object\",\n            \"properties\": {\n                \"ID\": {\n                    \"title\": \"Id\",\n                    \"type\": \"string\"\n                },\n                \"Offset\": {\n                    \"title\": \"Offset\",\n                    \"type\": \"integer\"\n                },\n                \"Size\": {\n                    \"title\": \"Size\",\n                    \"type\": \"integer\"\n                },\n                \"IsFinal\": {\n                    \"title\": \"Isfinal\",\n                    \"type\": \"boolean\"\n                },\n                \"IsPartial\": {\n                    \"title\": \"Ispartial\",\n                    \"type\": \"boolean\"\n                },\n                \"PartialUploads\": {\n                    \"title\": \"Partialuploads\",\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"SizeIsDeferred\": {\n                    \"title\": \"Sizeisdeferred\",\n                    \"type\": \"boolean\"\n                },\n                \"MetaData\": {\n                    \"title\": \"MetaData\",\n                    \"type\": \"object\",\n                    \"additionalProperties\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"Storage\": {\n                    \"$ref\": \"#/definitions/Storage\"\n                }\n            },\n            \"required\": [\n                \"ID\",\n                \"Offset\",\n                \"Size\",\n                \"IsFinal\",\n                \"IsPartial\",\n                \"SizeIsDeferred\",\n                \"MetaData\",\n                \"Storage\"\n            ]\n        },\n        \"Request\": {\n            \"title\": \"Request\",\n            \"type\": \"object\",\n            \"properties\": {\n                \"URI\": {\n                    \"title\": \"Uri\",\n                    \"type\": \"string\"\n                },\n                \"Method\": {\n                    \"title\": \"Method\",\n                    \"type\": \"string\"\n                },\n                \"RemoteAddr\": {\n                    \"title\": \"Remoteaddr\",\n                    \"type\": \"string\",\n                    \"format\": \"ipvanyaddress\"\n                },\n                \"Header\": {\n                    \"title\": \"Header\",\n                    \"type\": \"object\",\n                    \"additionalProperties\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"type\": \"string\"\n                        }\n                    }\n                }\n            },\n            \"required\": [\n                \"URI\",\n                \"Method\",\n                \"RemoteAddr\",\n                \"Header\"\n            ]\n        }\n    }\n}\n</code></pre>"},{"location":"hooks/#hook-types","title":"Hook types","text":"<p>Rustus offers multiple types of Hooks. We'll take a brief look on each type.</p>"},{"location":"hooks/#file-hooks","title":"File hooks","text":"<p>Rustus can work with two types of file hooks.</p> <ul> <li>Single file hook</li> <li>Hooks directory</li> </ul> <p>The main difference is that in case if use single file hook, hook name is passed as a command line argument to an executable file, but if you use hooks directory then hook name is used to determine a file to call. Let's take a look at the examples.</p> <p>Parameters: * <code>--hooks-file</code> - path to an executable file; * <code>--hooks-dir</code> - path to a directory with executable files.</p> single_file_hook.sh<pre><code>#!/bin/bash\n\n# Hook name would be \"pre-create\", \"post-create\" and so on.\nHOOK_NAME=\"$1\"\nHOOK_INFO=\"$2\"\nMEME=\"$(echo \"$HOOK_INFO\" | jq \".upload .metadata .meme\" | xargs)\"\n\n# Here we check if name in metadata is equal to pepe.\nif [[ $MEME = \"pepe\" ]]; then\n  echo \"This meme isn't allowed\" 1&gt;&amp;2;\n  exit 1\nfi\n</code></pre> <p>As you can see it uses first CLI parameter as a hook name and all hook data is received from the second one. Let's make it executable and make rustus use this hook.</p> CLIENV <pre><code>chmod +x \"hooks/single_file_hook.sh\"\n\nrustus --hooks-file \"hooks/single_file_hook.sh\"\n</code></pre> <pre><code>chmod +x \"hooks/single_file_hook.sh\"\nexport RUSTUS_HOOKS_FILE=\"hooks/single_file_hook.sh\"\n\nrustus\n</code></pre> <p>If you would like to use directory hooks you must create directory with the following structure:</p> <pre><code>hooks\n\u251c\u2500\u2500 post-create\n\u251c\u2500\u2500 post-finish\n\u251c\u2500\u2500 post-receive\n\u251c\u2500\u2500 post-terminate\n\u2514\u2500\u2500 pre-create\n</code></pre> <p>Warning</p> <p>If some hook file isn't found, rustus throws an error. In case with <code>pre-create</code> hook it can be fatal.</p>"},{"location":"hooks/#http-hooks","title":"Http Hooks","text":"<p>Http hooks use HTTP to send <code>POST</code> requests to some endpoint.</p> <p>Configuration parameters:</p> <ul> <li><code>--hooks-http-proxy-headers</code> - list of headers to proxy (separated by commas) to listener's endpoint;</li> <li><code>--hooks-http-urls</code> - list of absolute urls to send request to (separated by commas).</li> <li><code>--http-hook-timeout</code> - Timeout for all http requests in seconds. By default it's 2 seconds.</li> </ul> <p>Note</p> <p>Hook names are passed as header called <code>Hook-Name</code>.</p> CLIENV <pre><code>rustus --hooks-http-urls \"https://httpbin.org/post\" \\\n    --hooks-http-proxy-headers \"Authorization\" \\\n    --http-hook-timeout 1\n</code></pre> <pre><code>export RUSTUS_HOOKS_HTTP_URLS=\"https://httpbin.org/post\"\nexport RUSTUS_HOOKS_HTTP_PROXY_HEADERS=\"Authorization\"\nexport RUSTUS_HTTP_HOOK_TIMEOUT=\"1\"\n\nrustus\n</code></pre>"},{"location":"hooks/#example-application","title":"Example application","text":"<p>To be more verbose let's create simple web server that handles uploads using FastAPI.</p> <p>At first we need to install dependencies using pip.</p> <pre><code>pip install fastapi uvicorn\n</code></pre> server.py<pre><code>from fastapi import FastAPI, Header, HTTPException\nfrom typing import Optional\n\napp = FastAPI()\n\n\n@app.post(\"/hooks\")\ndef hook(\n        authorization: Optional[str] = Header(None),\n        hook_name: Optional[str] = Header(None),\n):\n    print(f\"Received: {hook_name}\")\n    if authorization != \"Bearer jwt\":\n        raise HTTPException(401)\n    return None\n</code></pre> <p>Now we can run this server using uvicorn.</p> <pre><code>uvicorn server:app --port 8080\n</code></pre> <p>Let's configure rustus to use this server as a hook receiver.</p> CLIENV <pre><code>rustus --hooks-http-urls \"http://localhost:8000/hooks\" \\\n    --hooks-http-proxy-headers \"Authorization\"\n</code></pre> <pre><code>export RUSTUS_HOOKS_HTTP_URLS=\"http://localhost:8000/hooks\"\nexport RUSTUS_HOOKS_HTTP_PROXY_HEADERS=\"Authorization\"\n\nrustus\n</code></pre> <p>That's it.</p>"},{"location":"hooks/#amqp-hooks","title":"AMQP hooks","text":"<p>AMQP hooks are used to store information about uploads using RabbitMQ.</p> <p>Configuration parameters:</p> <ul> <li><code>--hooks-amqp-url</code> - connection string to RabbitMQ;</li> <li><code>--hooks-amqp-queues-prefix</code> - prefix for queues for every event queue;</li> <li><code>--hooks-amqp-exchange</code> - name of exchange to use;</li> <li><code>--hooks-amqp-declare-exchange</code> - creates exchange on startup;</li> <li><code>--hooks-amqp-exchange-kind</code> - kind of exchange to connect to;</li> <li><code>--hooks-amqp-declare-queues</code> - creates all queues and binds them to exchange;</li> <li><code>--hooks-amqp-durable-exchange</code> - adds durability to created exchange;</li> <li><code>--hooks-amqp-durable-queues</code> - adds durability to created;</li> <li><code>--hooks-amqp-celery</code> - adds headers required by Celery;</li> <li><code>--hooks-amqp-routing-key</code> - routing key for all messages passed to exchange;</li> <li><code>--hooks-amqp-connection-pool-size</code> - maximum number of opened connections to RabbitMQ;</li> <li><code>--hooks-amqp-channel-pool-size</code> - maximum number of opened channels for each connection to RabbitMQ;</li> <li><code>--hooks-amqp-idle-connection-timeout</code> - timeout for idle connection in seconds. If the connection isn't used, it's dropped;</li> <li><code>--hooks-amqp-idle-channels-timeout</code> - timeout for idle channels in seconds. If the channel isn't used, it's dropped.</li> </ul> <p>If no hooks_amqp_routing_key specified, rustus will send all messages with different routing keys. Named like <code>{prefix}.{event type}</code>. Eg <code>rustus.pre-create</code> and so on. Otherwise, it will use only one routing key and only one queue!</p> <p>Warning</p> <p>Since we can't really track message delivery and responses Rustus won't stop a current upload in any case.</p> CLIENV <pre><code>rustus --hooks-amqp-url \"amqp://guest:guest@localhost:5672\" \\\n    --hooks-amqp-queues-prefix \"rustus_prefix\" \\\n    --hooks-amqp-exchange \"rustus\" \\\n    --hooks-amqp-exchange-kind \"topic\" \\\n    --hooks-amqp-routing-key \"route66\" \\\n    --hooks-amqp-declare-exchange \\\n    --hooks-amqp-declare-queues \\\n    --hooks-amqp-durable-exchange \\\n    --hooks-amqp-durable-queues \\\n    --hooks-amqp-celery \\\n    --hooks-amqp-connection-pool-size 10 \\\n    --hooks-amqp-channel-pool-size 10 \\\n    --hooks-amqp-idle-connection-timeout 20 \\\n    --hooks-amqp-idle-channels-timeout 10\n</code></pre> <pre><code>export RUSTUS_HOOKS_AMQP_URL=\"amqp://guest:guest@localhost:5672\"\nexport RUSTUS_HOOKS_AMQP_QUEUES_PREFIX=\"rustus_prefix\"\nexport RUSTUS_HOOKS_AMQP_EXCHANGE=\"rustus\"\nexport RUSTUS_HOOKS_AMQP_EXCHANGE_KIND=\"topic\"\nexport RUSTUS_HOOKS_AMQP_ROUTING_KEY=\"route66\"\nexport RUSTUS_HOOKS_AMQP_DECLARE_EXCHANGE=\"true\"\nexport RUSTUS_HOOKS_AMQP_DECLARE_QUEUES=\"true\"\nexport RUSTUS_HOOKS_AMQP_DURABLE_EXCHANGE=\"true\"\nexport RUSTUS_HOOKS_AMQP_DURABLE_QUEUES=\"true\"\nexport RUSTUS_HOOKS_AMQP_CELERY=\"true\"\nexport RUSTUS_HOOKS_AMQP_CONNECTION_POOL_SIZE=\"10\"\nexport RUSTUS_HOOKS_AMQP_CHANNEL_POOL_SIZE=\"10\"\nexport RUSTUS_HOOKS_AMQP_IDLE_CONNECTION_TIMEOUT=\"20\"\nexport RUSTUS_HOOKS_AMQP_IDLE_CHANNELS_TIMEOUT=\"10\"\n\nrustus\n</code></pre>"},{"location":"hooks/#using-rustus-with-celery","title":"Using Rustus with Celery","text":"<p>Rustus has a cool integration with Celery. Let's build a Celery application that handles rustus hooks.</p> <p>At first, we need to install Celery itself. <pre><code>pip install celery\n</code></pre></p> <p>Now we can create a file called \"celery.py\" in a directory \"rustus_celery\". This file contains code that handles celery tasks.</p> rustus_celery/celery.py<pre><code>import celery\n\napp = celery.Celery(\"rustus_celery\")\napp.conf.update(\n    broker_url=\"amqp://guest:guest@localhost:5672\",\n)\n\n\n@app.task(name=\"rustus.pre-create\")\ndef post_create(data):\n    print(f\"PRE CREATE: {data}\")\n\n\n@app.task(name=\"rustus.post-create\")\ndef post_create(data):\n    print(f\"POST CREATE: {data}\")\n\n\n@app.task(name=\"rustus.post-finish\")\ndef post_finish(data):\n    print(f\"POST FINISH: {data}\")\n\n\n@app.task(name=\"rustus.post-terminate\")\ndef post_terminate(data):\n    print(f\"POST TERMINATE: {data}\")\n\n\n@app.task(name=\"rustus.post-receive\")\ndef post_receive(data):\n    print(f\"POST RECEIVE: {data}\")\n</code></pre> <p>Info</p> <p>Every task has its name. You must use these names in order to handle tasks.</p> <p>Now we can run our celery worker to start executing tasks.</p> <pre><code>celery -A rustus_celery\n</code></pre> <p>After starting celery worker you can run Rustus with these parameters.</p> <p>The most important parameter is <code>--hooks-amqp-celery</code>, because it adds required by Celery headers to every message.</p> CLIENV <pre><code>rustus --hooks-amqp-url \"amqp://guest:guest@localhost:5672\" \\\n    --hooks-amqp-exchange \"celery\" \\\n    --hooks-amqp-exchange-kind \"direct\" \\\n    --hooks-amqp-routing-key \"celery\" \\\n    --hooks-amqp-celery\n</code></pre> <pre><code>export RUSTUS_HOOKS_AMQP_URL=\"amqp://guest:guest@localhost:5672\"\nexport RUSTUS_HOOKS_AMQP_EXCHANGE=\"celery\"\nexport RUSTUS_HOOKS_AMQP_EXCHANGE_KIND=\"direct\"\nexport RUSTUS_HOOKS_AMQP_ROUTING_KEY=\"celery\"\nexport RUSTUS_HOOKS_AMQP_CELERY=\"true\"\n\nrustus\n</code></pre>"},{"location":"hooks/#kafka-hooks","title":"Kafka hooks","text":"<p>Rustus support sending hooks to kafka cluster. We use rust-rdkafka as a driver. Since it uses a C++ library, it's configuration. If you have any question about specific parameter, please refer to the C++ library configuration.</p> <p>Info</p> <p>All messages are sent with a key, which is equals to upload_id.</p> <p>Configuration parameters:</p> <ul> <li><code>--hooks-kafka-urls</code> - Kafka urls. List of brokers to connect to in the format <code>host:port</code>. If you have multiple brokers, separate them with commas. Corresponds to <code>bootstrap.servers</code> in kafka config.</li> <li><code>--hooks-kafka-client-id</code> - Kafka producer client.id</li> <li><code>--hooks-kafka-topic</code> - Kafka topic. If specified, all events will be sent to this topic.</li> <li><code>--hooks-kafka-prefix</code> - Kafka prefix. If specified, all hook-names will be prepended with this string and used as a topic.</li> <li><code>--hooks-kafka-required-acks</code> - Kafka required acks. This parameter is used to configure how many replicas must acknowledge the message. Corresponds to <code>request.required.acks</code>.</li> <li><code>--hooks-kafka-compression</code> - Compression codec. This parameter is used to compress messages before sending them to Kafka. Corresponds to <code>compression.codec</code> in Kafka configuration.</li> <li><code>--hooks-kafka-idle-timeout</code> - Kafka idle timeout in seconds. After this amount of time in seconds, the connection will be dropped. Corresponds to <code>connections.max.idle.ms</code> in Kafka configuration, but in seconds.</li> <li><code>--hooks-kafka-send-timeout</code> - Kafka send timeout in seconds. After this amount of time in seconds, the message will be dropped</li> <li><code>--hooks-kafka-extra-options</code> - Extra options for Kafka. This parameter is used to pass additional options to Kafka. All options must be in the format <code>key=value</code>, separated by semicolon. Example: <code>key1=value1;key2=value2</code>.</li> </ul> CLIENV <pre><code>rustus --hooks-kafka-urls \"localhost:9094\" \\\n    --hooks-kafka-client-id \"client-1\" \\\n    --hooks-kafka-topic \"topic\" \\\n    --hooks-kafka-prefix \"my-prefix\" \\\n    --hooks-kafka-required-acks \\\n    --hooks-kafka-compression \"none\" \\\n    --hooks-kafka-idle-timeout \"10\" \\\n    --hooks-kafka-send-timeout \"10\" \\\n    --hooks-kafka-extra-options \"allow.auto.create.topics=true;security.protocol=plaintext\"\n</code></pre> <pre><code>export RUSTUS_HOOKS_KAFKA_URLS=\"localhost:9094\"\nexport RUSTUS_HOOKS_KAFKA_CLIENT_ID=\"client-1\"\nexport RUSTUS_HOOKS_KAFKA_TOPIC=\"my-topic\";\nexport RUSTUS_HOOKS_KAFKA_PREFIX=\"pref\"\nexport RUSTUS_HOOKS_KAFKA_COMPRESSION=\"gzip\"\nexport RUSTUS_HOOKS_KAFKA_IDLE_TIMEOUT=\"10\"\nexport RUSTUS_HOOKS_KAFKA_SEND_TIMEOUT=\"10\"\nexport RUSTUS_HOOKS_KAFKA_EXTRA_OPTIONS=\"allow.auto.create.topics=true;security.protocol=plaintext\"\n\n\nrustus\n</code></pre> <p>Warning</p> <p>Since we can't really track message delivery and responses Rustus won't stop a current upload in any case.</p>"}]}